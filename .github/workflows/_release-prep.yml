# **what?**
# Perform the version bump, generate the changelog and run tests.
#
# Inputs:
#  sha: the commit to attach to this release
#  version_number: version number for the release (ex: 1.2.3rc2)
#  target_branch: The branch that we will release from
#  testing: true or false for if this is a test of the release process
#
# Outputs:
#   final_sha: The sha that will actually be released.  This can differ from the
#              input sha if adding a version bump and/or changelog
#   changelog_path: path to the changelog file (ex .changes/1.2.3-rc1.md)
#
# **why?**
# Reusable and consistent GitHub release process.
#
# **when?**
# Call when ready to kick off a build and release
#
# Validation Checks
#
#  1. Bump the version if it has not been bumped
#  2. Generate the changelog (via changie) if there is no markdown file for this version
#  3. Only merge into the target branch when not testing, otherwise point to commit on new branch
#

name: Version Bump and Changelog Generation

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      version_number:
        required: true
        type: string
      target_branch:
        required: true
        type: string
      testing:
        required: true
        type: string
    outputs:
      final_sha:
        description: The new commit that includes the changelog and version bump.
        value: ${{ jobs.get-release-sha.outputs.final_sha }}
      changelog_path:
        description: The path to the changelog for this version
        value: ${{ jobs.audit-changelog.outputs.changelog_path }}

permissions:
  contents: write

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print variables
        run: |
            echo The last commit sha in the release: ${{ inputs.sha }}
            echo The release version number: ${{ inputs.version_number }}
            echo The branch to release from: ${{ inputs.target_branch }}

  audit-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog_path: ${{ steps.set_path.outputs.changelog_path }}
      exists: ${{ steps.set_existence.outputs.exists }}
      base_version: ${{ steps.semver.outputs.base-version }}
      prerelease: ${{ steps.semver.outputs.pre-release }}
      is_prerelease: ${{ steps.semver.outputs.is-pre-release }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: Audit Version and Parse Into Parts
        id: semver
        uses: dbt-labs/actions/parse-semver@v1
        with:
          version: ${{ inputs.version_number }}

      - name: Set Changelog Path
        id: set_path
        run: |
          if [[ ${{ steps.semver.outputs.is-pre-release }} -eq 1 ]]
          then
            echo '::set-output name=changelog_path::.changes/${{ steps.semver.outputs.base-version }}-${{ steps.semver.outputs.pre-release }}.md'
          else
            echo '::set-output name=changelog_path::.changes/${{ steps.semver.outputs.version }}.md'
          fi

      - name: Set Changelog Existence for Other Jobs
        id: set_existence
        run: |
          if test -f ${{ steps.set_path.outputs.changelog_path }}
          then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Job Output
        run: |
          echo changelog_path ${{ steps.set_path.outputs.changelog_path }}
          echo exists ${{ steps.set_existence.outputs.exists }}
          echo base_version ${{ steps.semver.outputs.base-version }}
          echo prerelease ${{ steps.semver.outputs.pre-release }}
          echo is_prerelease ${{ steps.semver.outputs.is-pre-release }}

  check-current-version:
    runs-on: ubuntu-latest
    outputs:
      up_to_date:  ${{ steps.set_status.outputs.up_to_date }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: Check Current Version in code
        id: set_status
        run: |
          if grep -Fxq "current_version = ${{ inputs.version_number }}" .bumpversion.cfg
          then
            echo "::set-output name=up_to_date::true"
          else
            echo "::set-output name=up_to_date::false"
          fi

      - name: Job Output
        run: echo up_to_date ${{ steps.set_status.outputs.up_to_date }}

  skip-generate-changelog:
    runs-on: ubuntu-latest
    needs: [audit-changelog]
    if: needs.audit-changelog.outputs.exists == 'true'

    steps:
      - name: Changelog Exists, Skip Release Prep
        run: echo A changelog file already exists at ${{ needs.audit-changelog.outputs.exists }}, skipping generating changelog

  skip-version-bump:
    runs-on: ubuntu-latest
    needs: [check-current-version]
    if: needs.check-current-version.outputs.up_to_date == 'true'

    steps:
      - name: Version Already bumped
        run: echo The version has already been bumped to ${{ inputs.version_number }}, skipping version bump

  create-new-branch:
    outputs:
      branch_name: ${{steps.variables.outputs.BRANCH_NAME}}
    runs-on: ubuntu-latest
    needs: [audit-changelog, check-current-version]
    if: needs.audit-changelog.outputs.exists == 'false' || needs.check-current-version.outputs.up_to_date == 'false'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: Set version value
        id: variables
        run: |
          echo "::set-output name=BRANCH_NAME::prep-release/${{ inputs.version_number }}_$GITHUB_RUN_ID"

      - name: Create branch
        run: |
          git checkout -b ${{steps.variables.outputs.BRANCH_NAME}}
          git push -u origin ${{steps.variables.outputs.BRANCH_NAME}}

      - name: Job Output
        run: echo BRANCH_NAME ${{ steps.variables.outputs.BRANCH_NAME }}

  generate-changelog:
    runs-on: ubuntu-latest
    needs: [audit-changelog, create-new-branch]
    if: needs.audit-changelog.outputs.exists == 'false'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{needs.create-new-branch.outputs.BRANCH_NAME}}

      - name: Install changie
        run: |
          brew tap miniscruff/changie https://github.com/miniscruff/changie
          brew install changie

      - name: Generate Pre Release Changelog
        if: needs.audit-changelog.outputs.is_prerelease == 1
        run: |
          changie batch ${{ needs.audit-changelog.outputs.base_version }} --move-dir '${{ needs.audit-changelog.outputs.base_version }}' --prerelease ${{ needs.audit-changelog.outputs.prerelease }}
          changie merge
      
      - name: Generate Final Release Changelog
        if: needs.audit-changelog.outputs.is_prerelease == 0
        run: |
          changie batch ${{ needs.audit-changelog.outputs.base_version }}  --include '${{ needs.audit-changelog.outputs.base_version }}' --remove-prereleases
          changie merge
      
      - name: Check Changelog Created Successfully
        run: |
          if [[ -f ${{ needs.audit-changelog.outputs.changelog_path }} ]]
          then
            echo Changelog file created successfully
          else
            echo Changelog failed to generate.  Exiting.
            exit 1
          fi

      - name: Commit & Push changes
        run: |
          git config user.name 'Github Build Bot'
          git config user.email 'buildbot@fishtownanalytics.com'
          git pull
          git add .
          git commit -m "Generated changelog for version ${{ inputs.version_number }}"
          git push

  bump-version:
    runs-on: ubuntu-latest
    needs: [check-current-version, create-new-branch]
    if: needs.check-current-version.outputs.up_to_date == 'false'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install python dependencies
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install --upgrade pip

      - name: Bump version
        # note: bumpversion is no longer supported, it actually points to bump2version now
        run: |
          source env/bin/activate
          pip install -r dev-requirements.txt
          env/bin/bumpversion --allow-dirty --new-version ${{inputs.version_number}} major
          git status

      - name: Commit & Push changes
        run: |
          git config user.name 'Github Build Bot'
          git config user.email 'buildbot@fishtownanalytics.com'
          git pull
          git add .
          git commit -m "Bumping version to ${{ inputs.version_number }}"
          git push
      
  run-tests:
  # TODO: this used to specify just unit tests, if we don't specify TOXENV it will run all tests - seems preferable?
    runs-on: ubuntu-latest
    needs: [create-new-branch, generate-changelog, bump-version]

    steps:
      - name: Skip for now
        run: echo Not set up for testing yet
      # - name: Check out the repository
      #   uses: actions/checkout@v2
      #   with:
      #     ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.8

      # - name: Install python dependencies
      #   run: |
      #     pip install --user --upgrade pip
      #     pip install tox
      #     pip --version
      #     tox --version

      # - name: Run tox
      #   run: tox
  
  merge-for-release:
    runs-on: ubuntu-latest
    needs: [run-tests, create-new-branch]
    if: inputs.testing == 'false'

    steps:
      - name: Log Values
        run: |
          echo inputs.target_branch ${{ inputs.target_branch }}
          echo needs.create-new-branch.outputs.BRANCH_NAME ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

      - name: Check out target branch
        uses: actions/checkout@v3

      - name: Merge changes with target branch
        uses: everlytic/branch-merge@1.1.2
        with:
          source_ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}
          target_branch: ${{ inputs.target_branch }}
          github_token: ${{ secrets.GITHUB_TOKEN }}  # TODO: probably need to use a custom PAT to override ``.latest`` protection rules
          commit_message_template: '[Automated] Merged {source_ref} into target {target_branch} during release process'

  get-release-sha:
  # Get the sha that will be released.  If the changelog already exists on the input sha and the version has already been bumped,
  # then it is what we will release. Otherwise we generated a changelog and did the version bump in this workflow and there is a
  # new sha to use from the merge we just did.  Grab that here instead.
  # If we are testing the release, we never merged into the target branch so that's what we need to get the sh of.
    outputs:
      final_sha: ${{ steps.final_sha.outputs.final_sha }}
    runs-on: ubuntu-latest
    needs: [create-new-branch, merge-for-release, audit-changelog, check-current-version]
    # always run this job, regardness of if the dependant jobs were skipped
    if: always()

    steps:
      - name: Log Inputs
        run: |
          echo testing: ${{ inputs.testing }}
          echo target_branch: ${{ inputs.target_branch }}
          echo new branch: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}
          echo changelog exists: ${{ needs.audit-changelog.outputs.exists }}
          echo version up to date: ${{ needs.check-current-version.outputs.up_to_date }}

      - name: Check out target branch
        if: inputs.testing == 'false'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.target_branch }}

      - name: Check out testing branch
        if: inputs.testing == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

      - name: Log branch
        run: git status

      - name: Set sha for release
        id: final_sha
        run: |
          if [[ ${{ needs.audit-changelog.outputs.exists }} == false ]] || [[ ${{ needs.check-current-version.outputs.up_to_date }} == false ]]
          then
            echo "::set-output name=final_sha::$(git rev-parse HEAD)"
          else
            echo "::set-output name=final_sha::${{ inputs.sha }}"
          fi

      - name: Job Output
        run: echo final_sha ${{ steps.final_sha.outputs.final_sha }}
