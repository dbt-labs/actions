# **what?**
# Perform the version bump, batch and merge the changelog and run tests.
#
# Inputs:
#  sha: the commit to attach to this release
#  version_number: version number for the release (ex: 1.2.3rc2)
#   
# **why?**
# Reusable and consistent GitHub release process.
#
# **when?**
# Call when ready to kick off a build and release
#
#  Note: This currently just passes data around without actually doing anything!
#

name: GitHub Release

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      version_number:
        required: true
        type: string
      target_branch:
        required: true
        type: string
    outputs:
      # TODO: how do we get the final sha when it's already been kicked off?
      final_sha:
        description: The new commit that includes the changelog and version bump.
        value: ${{ jobs.get-release-sha.outputs.final_sha }}
      changelog_path:
        description: The path to the changelog for this version
        value: ${{ jobs.check-changelog-exists.outputs.changelog_path }}

permissions:
  contents: write #TODO: may need more since it's merging in a branch

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print variables
        run: |
            echo The last commit sha in the release: ${{ inputs.sha }}
            echo The release version number: ${{ inputs.version_number }}
            echo The branch to release from: ${{ inputs.target_branch }}

  audit-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog_path: ${{ steps.set_path.outputs.changelog_path }}
      exists:  ${{ steps.set_existence.outputs.exists }}
      base_version: ${{ steps.semver.outputs.base-version }}
      prerelease: ${{ steps.semver.outputs.pre-release }}
      is_prerelease: ${{ steps.semver.outputs.is-pre-release }}

    steps:

      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: Audit Version and Parse Into Parts
        id: semver
        uses: dbt-labs/actions/parse-semver@v1
        with:
          version: ${{ inputs.version_number }}

      - name: Set Changelog Path
        id: set_path
        run: |
          if [[ ${{ steps.semver.outputs.is-pre-release }} -eq 1 ]]
          then
            echo '::set-output name=changelog_path::".changes/${{ steps.semver.outputs.base-version }}-${{ steps.semver.outputs.pre-release }}.md"'
          else
            echo '::set-output name=changelog_path::".changes/${{ steps.semver.outputs.version }}.md"'
          fi

      - name: Set Changelog Exists
        # TODO: if the changelog file exists is ti safe to assume we want to run this from the HEAD of the target branch?
        id: check_changelog
        uses: andstor/file-existence-action@v1
        with:
          # TODO: is this a good check?  first pass...
          files: "${{ steps.set_path.outputs.changelog_path }}"

      - name: Set Changelog Exisistence for Other Jobs
        id: set_existence
        run: echo '::set-output name=exists::${{steps.check_changelog.outputs.files_exists}}'

  check-current-version:
    runs-on: ubuntu-latest
    outputs:
      up_to_date:  ${{ steps.set_status.outputs.up_to_date }}

    steps:

      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: Check Current Version in code
        id: current_version
        run: |
          source env/bin/activate
          pip install -r dev-requirements.txt
          bump2version --dry-run --list <part> | grep <field name> | sed -r s,"^.*=",,

      - name: Set Version Status for Other Jobs
        id: set_status
        run: echo '::set-output name=up_to_date::${{steps.check_changelog.outputs.files_exists}}'

  skip-generate-changelog:
    runs-on: ubuntu-latest
    needs: [audit-changelog]
    if: needs.audit-changelog.outputs.exists == 'true'

    steps:
      - name: Changelog Exists, Skip Release Prep
        run: echo A changelog file already exists at ${{ needs.audit-changelog.outputs.exists }}, skipping

  skip-version-bump:
    runs-on: ubuntu-latest
    needs: [check-current-version]
    if: needs.check-current-version.outputs.up_to_date == 'true'

    steps:
      - name: Version Already bumped
        run: echo The version has already been bumped to ${{ inputs.version_number }}, skipping

  create-new-branch:
    outputs:
      branch_name: ${{steps.variables.outputs.BRANCH_NAME}}
    runs-on: ubuntu-latest
    needs: [audit-changelog, check-current-version]
    if: needs.audit-changelog.outputs.exists == 'false' || needs.check-current-version.outputs.up-to-date == 'false'

    steps:
      - name: Set version value
        id: variables
        run: |
          echo "::set-output name=BRANCH_NAME::prep-release/${{ inputs.version_number }}_$GITHUB_RUN_ID"
      - name: Create branch
        run: |
          git checkout -b ${{steps.variables.outputs.BRANCH_NAME}}
          git push origin ${{steps.variables.outputs.BRANCH_NAME}}
          git branch --set-upstream-to=origin/${{steps.variables.outputs.BRANCH_NAME}} ${{steps.variables.outputs.BRANCH_NAME}}
            - name: Push changes

      - name: Push branch
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.variables.outputs.BRANCH_NAME }}

  generate-changelog:
    runs-on: ubuntu-latest
    needs: [audit-changelog, create-new-branch]
    if: needs.audit-changelog.outputs.exists == 'false'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          ref: ${{needs.create-new-branch.outputs.BRANCH_NAME}}

      - name: Install changie
        run: |
          brew tap miniscruff/changie https://github.com/miniscruff/changie
          brew install changie  #TODO: pin version?

      - name: Generate Pre Release Changelog
        if: needs.audit-changelog.outputs.is_prerelease == 1
        run: |
          changie batch ${{ needs.audit-changelog.outputs.base_version }} --move-dir '${{ needs.audit-changelog.outputs.base_version }}' --prerelease ${{ needs.audit-changelog.outputs.prerelease }}
          changie merge
      
      - name: Generate Final Release Changelog
        if: needs.audit-changelog.outputs.is_prerelease == 0
        run: |
          changie batch ${{ needs.audit-changelog.outputs.base_version }}  --include '${{ needs.audit-changelog.outputs.base_version }}' --remove-prereleases
          changie merge
      
      - name: Check Changelog Created Successfully
        run: |
          echo TODO check file generated

      - name: Commit changelog to branch
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'Github Build Bot'
          author_email: 'buildbot@fishtownanalytics.com'
          message: 'Generated changelog for version ${{ inputs.version_number }}'
          branch: ${{needs.create-new-branch.outputs.BRANCH_NAME}}
          push: origin origin/${{needs.create-new-branch.outputs.BRANCH_NAME}}
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{needs.create-new-branch.outputs.BRANCH_NAME}}

  bump-version:
    runs-on: ubuntu-latest
    needs: [check-current-version, create-new-branch]
    if: needs.check-current-version.outputs.up_to_date == 'false'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install python dependencies
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install --upgrade pip

      - name: Bump version
        # TODO: bumpversion is no longer supported
        run: |
          source env/bin/activate
          pip install -r dev-requirements.txt
          env/bin/bumpversion --allow-dirty --new-version ${{inputs.version_number}} major
          git status

      - name: Commit version bump to branch
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'Github Build Bot'
          author_email: 'buildbot@fishtownanalytics.com'
          message: 'Bumping version to ${{ inputs.version_number }}'
          branch: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}
          push: origin origin/${{ needs.create-new-branch.outputs.BRANCH_NAME }}
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

  unit-test:
    runs-on: ubuntu-latest
    needs: [start-release-prep]

    # env:
    #   TOXENV: "unit"

    # steps:
      # - name: Check out the repository
      #   uses: actions/checkout@v2
      #   with:
      #     persist-credentials: false
      #     ref: ${{ github.event.inputs.sha }}

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.8

      # - name: Install python dependencies
      #   run: |
      #     pip install --user --upgrade pip
      #     pip install tox
      #     pip --version
      #     tox --version

      # - name: Run tox
      #   run: tox
    steps:
      - name: Run Unit Tests
        run: echo Running unit tests Not implemented - How to make this reusable?
  
  functional-test:
    runs-on: ubuntu-latest
    needs: [start-release-prep]

    steps:
      - name: Run Functional Tests
        run: echo Running functional tests Not implemented - How to make this reusable?
  
  merge-for-release:
    runs-on: ubuntu-latest
    needs: [unit-test, functional-test, start-release-prep, audit-changelog]

    steps:
      - name: Log Outputs
        run: |
          echo inputs.target_branch ${{ inputs.target_branch }}
          echo needs.start-release-pre.outputs.BRANCH_NAME ${{ needs.start-release-prep.outputs.BRANCH_NAME }}
      
      - name: Check out target branch
        uses: actions/checkout@v2
      
      # TODO: is there a better way to merge/commit? 
      - name: Merge changes with target branch
        uses: everlytic/branch-merge@1.1.2
        with:
          source_ref: ${{ needs.start-release-prep.outputs.BRANCH_NAME }}
          target_branch: ${{ inputs.target_branch }}
          github_token: ${{ secrets.GITHUB_TOKEN }}  # TODO: probably need to use a custom PAT to override .latest protection rules
          commit_message_template: '[Automated] Merged {source_ref} into target {target_branch} during release process'

  get-release-sha:
  # Get the sha that will be released.  If the changelog already exists on the input sha, then it is what we will release.
  # Otherwise we generated a changelog and did the version bump in this workflow and there is a new sha to use.  Grab that
  # here instead.
    outputs:
      final_sha: ${{ steps.final_sha.outputs.final_sha }}
    runs-on: ubuntu-latest
    needs: [merge-for-release]
    steps:
      - name: Check out target branch
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.target_branch }}
      - name: Set sha for releas
        if: needs.audit-changelog.outputs.exists == 'false'
        id: final_sha
        run: |
          if [${{ needs.audit-changelog.outputs.exists }} -eq 'false'] then
            echo "::set-output name=final_sha::$(git rev-parse HEAD)"
          else
            echo "::set-output name=final_sha::${{ inputs.sha }}"
          fi
