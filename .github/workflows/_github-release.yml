# **what?**
# If no release already exists for this commit and version, create the tag and release it to GitHub.
# If a release already exists for this commit, skip creating the release but finish with a success.
# If a release exists for this commit under a different tag, fail.
#
# Inputs:
#  sha: the commit to attach to this release
#  version_number: version number for the release (ex: 1.2.3rc2)
#  file_uploads: Newline-delimited globs of paths to assets to upload for release
#   
# **why?**
# Reusable and consistent GitHub release process.
#
# **when?**
# Call after the build process.
#
# This workflow expects the artifacts to already be built and living in the artifact store of the workflow.
#

name: GitHub Release

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      version_number:
        required: true
        type: string
      changelog_path:
        description: Path to the changelog file for release notes
        required: true
        type: string
      file_uploads:
        description: Newline-delimited globs of paths to assets to upload for release
        required: true
        type: string
    outputs:
      tag:
        description: The tag we release
        value: ${{ jobs.check-release-exists.outputs.tag }}

permissions:
  contents: write

env:
  tag: v${{ inputs.version_number }}

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print variables
        run: |
            echo The last commit sha in the release: ${{ inputs.sha }}
            echo The release version number: ${{ inputs.version_number }}
            echo Expected Changlog path: "${{ inputs.changelog_path }}"

  check-release-exists:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set_existence.outputs.exists }}
      tag: ${{ steps.set_tag.outputs.tag }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      
      - name: Check if release exists for tag
        id: release_exists
        run: |
          exists=$((gh release view v2.2.4rc3 --json targetCommitish) 2>&1)
          if [[ "$release_details" == "release not found" ]]
          then
            echo Release for tag ${{ env.tag }} does not exist
            echo "::set-output name=exists::false"
          else
            echo Release for tag ${{ env.tag }} already exists
            echo "::set-output name=exists::true"
          fi

      # if the release already exists, make sure it's for the correct commit!
      - name: Audit Release Commit for Tag
        if: steps.release_exists.outputs.exists == 'true'
        id: cli_tag
        run: |
          release_details=`gh release view ${{ env.tag }} --json targetCommitish`
          commit=`echo $(jq -r '.targetCommitish' <<< "$release_details")`
          echo Commit: $commit
          if $commit != ${{ inputs.sha }} then
            echo Release for tag ${{ env.tag }} already exists for commit $commit!
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  skip-github-release:
    runs-on: ubuntu-latest
    needs: [check-release-exists]
    if: needs.check-release-exists.outputs.exists == 'true'

    steps:
      - name: Tag Exists, Skip GitHub Release Job
        run: echo A tag already exists for ${{ env.tag }} and commit, skipping release

  audit-release-different-commit:
    runs-on: ubuntu-latest
    needs: [check-release-exists]
    if: needs.check-release-exists.outputs.exists == 'false'

    steps:

      - name: Check if release already exists for commit
        uses: cardinalby/git-get-release-action@v1
        id: check_release_commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commitSha: ${{inputs.sha}}
          doNotFailIfNotFound: true # returns blank outputs when not found instead of error
          searchLimit: 15 # Since we only care about recent releases, speed up the process

      - name: Print Release Details
        run: |
          echo steps.check_release_commit.outputs.id ${{ steps.check_release_commit.outputs.id}}
          echo steps.check_release_commit.outputs.tag_name ${{ steps.check_release_commit.outputs.tag_name}}
          echo steps.check_release_commit.outputs.target_commitish ${{ steps.check_release_commit.outputs.target_commitish}}
          echo steps.check_release_commit.outputs.prerelease ${{ steps.check_release_commit.outputs.prerelease}}


      # Since we already know a release for this tag does not exist, if we find anything it's for the wrong tag, exit
      - name: Check if the tag matches the version number
        if: steps.check_release_commit.outputs.id != ''
        run: |
          echo Tag "${{ steps.check_release_commit.outputs.tag_name}}" already exists for this commit!
          echo Cannot create a new tag for "${{ env.tag }}" for the same commit.
          exit 1

  github-release:
    runs-on: ubuntu-latest
    needs: [check-release-exists]
    if: needs.check-release-exists.outputs.exists == 'false'

    steps:

      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: '.'

      - name: Display structure of all downloaded files
        run: ls -R

      - name: Set release type
        id: release_type
        run: |
          if ${{ contains(inputs.version_number, 'rc') ||  contains(inputs.version_number, 'b') }}
          then
            echo This is a prerelease
            echo ::set-output name=prerelease::--prerelease
          else
            echo This is not a prerelease
          fi

      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Create GitHub Release
        run: |
          gh release create $TAG -t $TITLE -F $RELEASE_NOTES --target $COMMIT $PRERELEASE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.tag }}
          TITLE: ${{ github.event.repository.name }} ${{ env.tag }}
          RELEASE_NOTES: ${{ inputs.changelog_path }}
          COMMIT: ${{ inputs.sha }}
          PRERELEASE: ${{ steps.release_type.outputs.prerelease}}
