# **what?**
# If no release already exists for this commit and version, create the tag and release it to GitHub.
# If a release already exists for this commit, skip creating the release but finish with a success.
# If a release exists for this commit under a different tag, fail.
#
# Inputs:
#  sha: the commit to attach to this release
#  version_number: version number for the release (ex: 1.2.3rc2)
#  file_uploads: Newline-delimited globs of paths to assets to upload for release
#   
# **why?**
# Reusable and consistent GitHub release process.
#
# **when?**
# Call after the build process.
#
# This workflow expects the artifacts to already be built and living in the artifact store of the workflow.
#

name: GitHub Release

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      version_number:
        required: true
        type: string
      file_uploads:
        description: Newline-delimited globs of paths to assets to upload for release
        required: true
        type: string
    outputs:
      tag:
        description: The tag we release
        value: ${{ jobs.check-release-exists.outputs.tag }}

permissions:
  contents: write

env:
  tag: v${{ inputs.version_number }}

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print variables
        run: |
            echo The last commit sha in the release: ${{ inputs.sha }}
            echo The release version number: ${{ inputs.version_number }}
            echo Expected Changlog path: "${{ github.workspace }}/${{ inputs.version_number }}.md"

  check-release-exists:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set_existence.outputs.exists }}
      tag: ${{ steps.set_tag.outputs.tag }}

    steps:
      - name: Check if release already exists for commit
        uses: cardinalby/git-get-release-action@v1
        id: check_release_commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commitSha: ${{inputs.sha}}
          doNotFailIfNotFound: true # returns blank outputs when not found instead of error
          searchLimit: 15 # Since we only care about recent releases, speed up the process

      - name: Print Release Details
        run: |
          echo steps.check_release_commit.outputs.id ${{ steps.check_release_commit.outputs.id}}
          echo steps.check_release_commit.outputs.tag_name ${{ steps.check_release_commit.outputs.tag_name}}
          echo steps.check_release_commit.outputs.target_commitish ${{ steps.check_release_commit.outputs.target_commitish}}
          echo steps.check_release_commit.outputs.prerelease ${{ steps.check_release_commit.outputs.prerelease}}

      - name: Check if the tag matches the version number
        if: |
          steps.check_release_commit.outputs.id != ''
          && steps.check_release_commit.outputs.tag_name != env.tag 
        run: |
          echo Tag "${{ steps.check_release_commit.outputs.tag_name}}" already exists for this commit!
          echo Cannot create a new tag for "${{ env.tag }}"
          exit 1
      
      # If no releases were found for the commit, check to see if any releases exists for the tag already.
      # If any release exists, immediately fail because we can't know what to do since the release exists
      # but it is against a different commit than was input.
      - name: Check if release already exists for this tag
        if: steps.check_release_commit.outputs.id != ''
        uses: cardinalby/git-get-release-action@v1
        id: check_release_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ env.tag }}
          doNotFailIfNotFound: true # returns blank outputs when not found
          searchLimit: 15 # Since we only care about recent releases, speed up the process

      - name: Check if the tag matches the version number
        if: steps.check_release_tag.outputs.id != ''
        run: |
          echo Tag "${{ steps.check_release_tag.outputs.tag_name}}" already exists for a different commit!
          echo Check your releases!  This should not happen.
          exit 1

      - name: Print Release Details
        run: |
          echo steps.check_release.outputs.id ${{ steps.check_release.outputs.id}}
          echo steps.check_release.outputs.tag_name ${{ steps.check_release.outputs.tag_name}}
          echo steps.check_release.outputs.target_commitish ${{ steps.check_release.outputs.target_commitish}}
          echo steps.check_release.outputs.prerelease ${{ steps.check_release.outputs.prerelease}}

      - name: Set Output for Release Exisistence
        # use the output from the check_release_commit step here since the check_release_tag should have returned nothing
        id: set_existence
        run: |
          if [ -z "${{ steps.check_release_commit.outputs.id }}" ]
          then
            echo '::set-output name=exists::false'
          else
            echo '::set-output name=exists::true'
          fi

      - name: Set Tag Output
        id: set_tag
        run: |
          echo '::set-output name=tag::${{ env.tag }}'

  skip-github-release:
    runs-on: ubuntu-latest
    needs: [check-release-exists]
    if: needs.check-release-exists.outputs.exists == 'true'

    steps:
      - name: Tag Exists, Skip GitHub Release Job
        run: echo A tag already exists for ${{ env.tag }} and commit, skipping release

  github-release:
    runs-on: ubuntu-latest
    needs: [check-release-exists]
    if: needs.check-release-exists.outputs.exists == 'false'

    steps:
      - name: Check previous output
        run: echo needs.check-release-exists.outputs.exists ${{needs.check-release-exists.outputs.exists }}

      - uses: actions/download-artifact@v2
        with:
          name: ${{inputs.version_number}}
          path: '.'

      - name: List artifact contents (expect dist/ and <version>.md)
        run: ls -al

      # Need to set an output variable because env variables can't be taken as input
      # This is needed for the next step with releasing to GitHub
      - name: Find release type
        id: release_type
        env:
          IS_PRERELEASE: ${{ contains(inputs.version_number, 'rc') ||  contains(inputs.version_number, 'b') }}
        run: |
          echo ::set-output name=isPrerelease::$IS_PRERELEASE

      - name: Creating GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: dbt-core ${{ env.tag }}
          tag_name: ${{ env.tag }}
          prerelease: ${{ steps.release_type.outputs.isPrerelease }}
          target_commitish: ${{inputs.sha}}
          body_path: ${{ github.workspace }}/${{ inputs.version_number }}.md
          files: ${{ inputs.file_uploads }}
