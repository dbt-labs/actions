# **what?**
# If no release already exists for this commit and version, create the tag and release it to GitHub.
# If a release already exists for this commit, skip creating the release but finish with a success.
# If a release exists for this commit under a different tag, fail.
#
# Inputs:
#  sha: the commit to attache to this release
#  version_number: version number for the release (ex: 1.2.3rc2)
#  file_uploads: Newline-delimited globs of paths to assets to upload for release
#   
# **why?**
# Reusable and consistent GitHUb release process.
#
# **when?**
# Call after the build process.
#
# This workflow expects the artifacts to already be built and living in the artifact store of the workflow.
#

name: GitHub Release

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      version_number:
        required: true
        type: string
      file_uploads:
        description: Newline-delimited globs of paths to assets to upload for release
        required: true
        type: string

permissions:
  contents: write

env:
  tag: v${{github.event.inputs.version_number}}

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print variables
        run: |
            echo The last commit sha in the release: ${{ github.event.inputs.sha }}
            echo The release version number: ${{ github.event.inputs.version_number }}
            echo Expected Changlog path: "${{ github.workspace }}/${{ github.event.inputs.version_number }}.md"

  check-release-exists:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set_existence.outputs.exists }}

    steps:
      - name: Check if release already exists for commit
        uses: cardinalby/git-get-release-action@v1
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commitSha: ${{github.event.inputs.sha}}
          doNotFailIfNotFound: true # returns blank outputs when not found
          searchLimit: 15 # Since we only care about recent releases, speed up the process

      - name: Print Release Details
        run: |
          echo steps.check_release.outputs.id ${{ steps.check_release.outputs.id}}
          echo steps.check_release.outputs.tag_name ${{ steps.check_release.outputs.tag_name}}
          echo steps.check_release.outputs.target_commitish ${{ steps.check_release.outputs.target_commitish}}
          echo steps.check_release.outputs.prerelease ${{ steps.check_release.outputs.prerelease}}

      - name: Check if the tag matches the version number
        if: |
          steps.check_release.outputs.id != ''
          && steps.check_release.outputs.tag_name != env.tag 
        run: |
          echo Tag "${{ steps.check_release.outputs.tag_name}}" already exists for this commit!
          echo Cannot create a new tag for "${{ env.tag }}"
          exit 1

      - name: Set Output
        id: set_existence
        run: |
          if [ -z "${{ steps.check_release.outputs.id }}" ]
          then
            echo '::set-output name=exists::false'
          else
            echo '::set-output name=exists::true'
          fi

  skip-github-release:
    runs-on: ubuntu-latest
    needs: [check-release-exists]
    if: needs.check-release-exists.outputs.exists == 'true'

    steps:
      - name: Tag Exists, Skip GitHub Release Job
        run: echo A tag already exists for ${{ env.tag }} and commit, skipping release

  github-release:
    runs-on: ubuntu-latest
    needs: [check-release-exists]
    if: needs.check-release-exists.outputs.exists == 'false'

    steps:
      - name: Check previous output
        run: echo needs.check-release-exists.outputs.exists ${{needs.check-release-exists.outputs.exists }}

      - uses: actions/download-artifact@v2
        with:
          name: ${{github.event.inputs.version_number}}
          path: '.'

      - name: List artifact contents (expect dist/ and <version>.md)
        run: ls -al

      # Need to set an output variable because env variables can't be taken as input
      # This is needed for the next step with releasing to GitHub
      - name: Find release type
        id: release_type
        env:
          IS_PRERELEASE: ${{ contains(github.event.inputs.version_number, 'rc') ||  contains(github.event.inputs.version_number, 'b') }}
        run: |
          echo ::set-output name=isPrerelease::$IS_PRERELEASE

      - name: Creating GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: dbt-core v${{github.event.inputs.version_number}}
          tag_name: v${{github.event.inputs.version_number}}
          prerelease: ${{ steps.release_type.outputs.isPrerelease }}
          target_commitish: ${{github.event.inputs.sha}}
          body_path: ${{ github.workspace }}/${{ github.event.inputs.version_number }}.md
          files: ${{ github.event.inputs.file_uploads }}
