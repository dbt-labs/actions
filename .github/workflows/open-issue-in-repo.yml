# **what?**
# Open an issue in a specified repository with a specified title and body.  If the issue already exists, do nothing.
# The calling workflow should be triggered off an issue.

# **why?**
# To be able to trigger issues to open in other repositories from a workflow in a different repository.

# **when?**
# This will be triggered from another workflow on a issue.  This could be triggered when a label is added to an issue.


name: Open Issue in Another Repository

on:
  workflow_dispatch:  # for testing
    inputs:
      issue_repository:
        description: 'Repository to open the issue in'
        required: true
        type: string
        default: dbt-labs/dbt-docs
      issue_title:
        description: 'Title of the issue'
        required: true
        type: string
        default: "Testing issue opening from another workflow"
      issue_body:
        description: 'The body of the issue'
        required: true
        type: string
        default: "This is a test issue opened from another workflow."
      issue_number:
        description: 'The issue to open the new issue from'
        required: true
        type: string
        default: "133"

  workflow_call:
    inputs:
      issue_repository:
        description: 'Repository to open the issue in'
        required: true
        type: string
      issue_title:
        description: 'Title of the issue'
        required: true
        type: string
      issue_body:
        description: 'The body of the issue'
        required: true
        type: string
    secrets:
      FISHTOWN_BOT_PAT:
        description: 'PAT to use for authentication'
        required: true

defaults:
  run:
    shell: bash

permissions:
  issues: write # opens new issues
  pull-requests: write # comments on PRs

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.comment_check.outputs.exists }}
      issue_number: ${{ steps.issue_values.outputs.issue_number }}

    steps:

      - name: "[DEBUG] Print variables"
        id: print_variables
        run: |
          echo "inputs.issue_repository:      ${{ inputs.issue_repository }}"
          echo "inputs.issue_title:           ${{ inputs.issue_title}}"
          echo "inputs.issue_body:            ${{ inputs.issue_body }}"

      - name: "Determine Issue Values"
        id: issue_values
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "issue_number=${{ inputs.issue_number }}" >> $GITHUB_OUTPUT
          else
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      
      # this step uses the read permission from the GITHUB_TOKEN it inherits
      - name: "Check for comment"
        uses: peter-evans/find-comment@v3
        id: issue_comment
        with:
          issue-number: ${{ steps.issue_values.outputs.issue_number }}
          comment-author: "FishtownBuildBot"
          body-includes: "Opened a new issue in ${{ inputs.issue_repository }}:"

      - name: "Set if comment already exists"
        id: comment_check
        run: |
          if [ '${{ steps.issue_comment.outputs.comment-body }}' = '' ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            title="Continue Processing."
            message="Opening a new issue in ${{ inputs.issue_repository }}."
          else
            echo "exists=true" >> $GITHUB_OUTPUT
            title="Stop processing."
            message="Comment already exists for this PR indicating associated issue. New issue will not be opened."
          fi
          echo "::notice $title::$message"

  open_new_issue:
    needs: [prep]
    if: ${{ needs.prep.outputs.exists == 'false' }}
    runs-on: ubuntu-latest

    steps:
      - name: "Check out ${{ github.repository }}"
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}

      - name: "Open Issue in ${{ inputs.issue_repository }}"
        id: open_issue
        run: |
          issue=$(gh issue create --repo ${{ inputs.issue_repository }} \
            --title "${{ inputs.issue_title }}" \
            --body "${{ inputs.issue_body }}")
          echo "issue_url=$issue" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.FISHTOWN_BOT_PAT }}

      - name: "Set Issue Comment"
        id: set_issue_comment
        run: |
          issue_comment="Opened a new issue in ${{ inputs.issue_repository }}: ${{ steps.open_issue.outputs.issue_url }}"
          echo "issue_comment=$issue_comment" >> $GITHUB_OUTPUT

      - name: "Leave Issue Comment Linking to Opened Issue"
        id: issue_comment
        run: |
          gh issue comment --repo ${{ github.repository }} \
            ${{ needs.prep.outputs.issue_number }} \
            --body "${{ steps.set_issue_comment.outputs.issue_comment }}"
        env:
          GITHUB_TOKEN: ${{ secrets.FISHTOWN_BOT_PAT }}
