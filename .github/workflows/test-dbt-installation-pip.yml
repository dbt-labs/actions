# **what?**
# This workflow installs the latest version of dbt adapter from PyPI.
# It then runs 'dbt --version' to verify the installation was successful.
# If it fails for the scheduled runs, it will post to our team alerts channel.

# **why?**
# This is a simple way to test all adapter installations at a single
# time. It allows us to test them on a schedule as well to check for
# any breaking dependency changes that might happen and alert us on it.

# **when?**
# This reusable workflow can be called or started manually
# by specifying the package name

name: dbt Installation - pip Integration Tests

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "Package name to test (i.e. dbt-postgres)"
        required: true
        type: string
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
    secrets:
      SLACK_WEBHOOK_URL:
        description: Slack app webhook url
        required: true

permissions:
  contents: read # required for slack-post-notification workflow

env:
  ARTIFACT_BASENAME: "pip-installation-test"
  ARTIFACT_RETENTION_DAYS: 1

jobs:
  generate-artifact-name:
    runs-on: ubuntu-latest

    outputs:
      artifact-name: ${{ steps.artifact-name.outputs.name }}

    steps:
      - name: "Generate Artifact Name"
        id: artifact-name
        run: |
          date=$(date +'%m%d%Y')
          name="${{ env.ARTIFACT_BASENAME }}-$date"
          echo "name=$name" >> $GITHUB_OUTPUT

  pip-installation-test:
    runs-on: ubuntu-latest
    needs: generate-artifact-name

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - name: "Set up Python - ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Update Python Packages"
        run: |
          python -m pip install --user --upgrade pip

      - name: "[DEBUG] Show Package Installer Python Version"
        run: |
          python -m pip --version

      - name: "Install Package - ${{ inputs.package_name }}"
        run: |
          python -m pip install pip ${{ inputs.package_name }}

      - name: "[DEBUG] Show Installed Packages"
        run: |
          python -m pip list

      - name: "[DEBUG] Show Package Info - ${{ inputs.package_name }}"
        run: |
          python -m pip show ${{ inputs.package_name }}

      - name: "Verify ${{ inputs.package_name }} Version"
        run: |
          dbt --version

      - name: "Dump Job Status"
        if: ${{ always() }}
        id: job-status
        run: |
          file="tets-${{ strategy.job-index }}-python-v${{ matrix.python-version }}.json"
          # Create file
          touch $file 
          # Write job status to file
          echo $JOB_STATUS >> $file
          # Set path to file for subsequent steps          
          echo "path=$file" >> $GITHUB_OUTPUT
        env:
          JOB_STATUS: ${{ toJson(job.status) }}

      - name: "Upload Job Status"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.generate-artifact-name.outputs.artifact-name }}
          path: ${{ steps.job-status.outputs.path }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  check-jobs-status:
    name: "Check Job Statuses"
    runs-on: ubuntu-latest
    needs: [generate-artifact-name, pip-installation-test]
    # if: ${{ failure()}}

    outputs:
      slack_message: ${{ steps.get-slack-message.outputs.result }}

    steps:
      - name: "Download Artifact ${{ needs.generate-artifact-name.outputs.artifact-name }}"
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: .

      - name: "[DEBUG] Display Structure Of All Downloaded Files"
        run: ls -R

      - name: "Generate Slack Message"
        uses: actions/github-script@v6
        id: get-slack-message
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const path = require('path');
            const artifact_folder = './${{ needs.generate-artifact-name.outputs.artifact-name }}'

            const JOB_STATUSES_ENUM = {
                success: "success",
                failure: "failure",
                cancelled: "cancelled"
            };

            const jobs_statuses = {
                failed: [],
                success: [],
                cancelled: [],
                undefined: []
            };

            const files_list = fs.readdirSync(artifact_folder);
            core.debug(files_list);

            files_list.map(file => {
                const buffer = fs.readFileSync(`${artifact_folder}/${file}`);
                const jobs_status = buffer.toString().trim().replace(/['"]+/g, '');

                switch (jobs_status) {
                    case JOB_STATUSES_ENUM.success:
                        jobs_statuses.success.push(file);
                        break;
                    case JOB_STATUSES_ENUM.failed:
                        jobs_statuses.failed.push(file);
                        break;
                    case JOB_STATUSES_ENUM.cancelled:
                        jobs_statuses.cancelled.push(file);
                        break;
                    default:
                        jobs_statuses.undefined.push(file);
                }
            });

            const jobs_statistics = `Jobs status: ${JOB_STATUSES_ENUM.success} - ${jobs_statuses.success.length}; ${JOB_STATUSES_ENUM.failed} - ${jobs_statuses.failed.length}; ${JOB_STATUSES_ENUM.cancelled} - ${jobs_statuses.cancelled.length}; undefined: - ${jobs_statuses.undefined.length};`  
            const slack_message = "pip nightly installation test failed for - ${{ inputs.package_name }}.";

            core.debug(slack_message+jobs_statistics);

            return slack_message+jobs_statistics;

  slack-notification:
    name: "Post Scheduled Run Failures"
    needs: check-jobs-status

    uses: dbt-labs/dbt-release/.github/workflows/slack-post-notification.yml@main
    with:
      status: "failure"
      notification_title: "needs.check-jobs-status.outputs.slack_message"

    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_TEST_CHANNEL }}
