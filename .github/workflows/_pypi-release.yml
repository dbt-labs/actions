# **what?**
# After releasing to GitHub, release to PyPI
#
# Inputs:
#   tag: tag of release in the format v1.2.3rc1
#   testing: true is releasing to test PyPI, otherwise false
# 
# **why?**
# Automate the release process
#
# **when?**
#  After successfully releasing to GitHub
#
# Assumptions
#  1.  The name of the repository is the name of the package on PyPI
#

name: PyPI release

on:
  workflow_call:
    inputs:
      tag:
        description: 'The tag for the release (ie. v1.0.0b1)'
        required: true
        type: string
      testing:
        required: true
        type: boolean
    # pass through secrets for both PyPi Test and Prod so they're always there
    secrets:
      PYPI_API_TOKEN:
        description: AWS Access Key ID
        required: true
      TEST_PYPI_API_TOKEN:
        description: Test Pypi api token
        required: true

permissions:
  contents: read

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print variables
        run: |
            echo Tag: ${{ inputs.tag }}
            echo Release to test PyPI: ${{ inputs.testing }}

  check-pypi-exists:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.set_existence.outputs.exists }}
  
    steps:
      - name: Placeholder
        run: echo Workflow is not built

      - name: Check PyPI
        id: pypi
        continue-on-error: true
        uses: dbt-labs/actions/py-package-info@v1
        with:
          package: ${{ github.event.repository.name }}
          version: ${{ inputs.version_number }}
      
      - name: Set Outputs
        id: set_status
        run: |
          # docs on conclusion vs outcome - https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
          [ "${{ steps.invalid-package.conclusion }}" != success ] && exit 1 # confirm `invalid-package` step ran to completion
          [ "${{ steps.invalid-package.outcome }}" != failure ] && exit 1 # confirm `invalid-package` step failed
          exit 0

      - name: Set output
        id: set_existence
        run: echo '::set-output name=exists::true'

  skip-pypi-release:
    runs-on: ubuntu-latest
    needs: [check-pypi-exists]
    if: needs.check-pypi-exists.outputs.exists == 'true'

    steps:
      - name: PyPI Release Exists, Skip
        run: echo A release already exists for this version ${{ inputs.tag }} on Pypi, skipping

  test-pypi-release:
    runs-on: ubuntu-latest
    needs: [check-pypi-exists]
    if: needs.check-pypi-exists.outputs.exists == 'false' && ${{ inputs.testing }} == 'false'
  
    environment: PypiTest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: 'dist'

      - name: Publish distribution to test PyPI
        uses: pypa/gh-action-pypi-publish@v1.5
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  prod-pypi-release:
    runs-on: ubuntu-latest
    needs: [check-pypi-exists]
    if: needs.check-pypi-exists.outputs.exists == 'false'  && ${{ inputs.testing }} == 'true'
  
    environment: PypiProd
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: 'dist'

      - name: Publish distribution to PyPI
        if: ${{ inputs.testing }} == 'true'
        uses: pypa/gh-action-pypi-publish@v1.5
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  validate-pypi-package:
    runs-on: ubuntu-latest
    needs: [test-pypi-release, prod-pypi-release]
    # always run this step because one of the needs are always skipped.
    if: always()

    steps:
      - name: Check the package successfully released to PyPI
        run: echo Need to implement this
      
      - name: Set output
        id: set_existence
        run: |
          if [[ exists == true ]]
          then
            echo ${{ inputs.tag }} released to Pypi
          else
            echo ${{ inputs.tag }} FAILED to released to Pypi.  Manual intervention required.
            exit 1
          fi

