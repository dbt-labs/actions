# **what?**
# This workflow pulls docker images with dbt adapters on board from GitHub Packages.
# Workflow pulls images with "1.*.latest" tags only.
# It then runs 'dbt --version' to verify the installation was successful.
# If it fails for the scheduled runs, it will post to our team alerts channel.

# **why?**
# This is a simple way to test all adapter installations at a single
# time. It allows us to test them on a schedule as well to check for
# any breaking dependency changes that might happen and alert us on it.

# **when?**
# This reusable workflow can be called or started manually
# by specifying the package name

name: dbt Installation - Docker Integration Tests

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "Package name to test (i.e. dbt-postgres)"
        required: true
        type: string
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
    secrets:
      SLACK_WEBHOOK_URL:
        description: Slack app webhook url
        required: true

permissions:
  contents: read # required for slack-post-notification workflow
  packages: read # required to fetch tags for a container

env:
  GITHUB_PACKAGES_LINK: "ghcr.io"
  NOTIFICATION_PREFIX: "[Docker Installation Tests]"
  ARTIFACT_BASENAME: "docker-installation-test"
  ARTIFACT_RETENTION_DAYS: 1

defaults:
  run:
    shell: bash

jobs:
  generate-artifact-name:
    runs-on: ubuntu-latest

    outputs:
      artifact-name: ${{ steps.artifact-name.outputs.name }}

    steps:
      - name: "Generate Artifact Name"
        id: artifact-name
        run: |
          date=$(date +'%m%d%Y-%H%M%S')
          name="${{ env.ARTIFACT_BASENAME }}-${{ inputs.package_name }}-$date"
          echo "name=$name" >> $GITHUB_OUTPUT

  fetch-container-tags:
    runs-on: ubuntu-latest

    outputs:
      latest-tags: ${{ steps.get-latest-tags.outputs.container-tags }}

    steps:
      - name: "Fetch ${{ inputs.package_name }} Tags From ${{ env.GITHUB_PACKAGES_LINK }}"
        uses: dbt-labs/actions/fetch-container-tags@v1.1.1
        id: get-latest-tags
        with:
          package_name: ${{ inputs.package_name }}
          organization: "dbt-labs"
          pat: ${{ secrets.GITHUB_TOKEN }}
          regex: "latest$"
          perform_match_method: "search"
          retries: 3

      - name: "[ANNOTATION] ${{ inputs.package_name }} - tags to test"
        run: |
          title="${{ inputs.package_name }} - tags to test"
          message="The workflow will run tests for the following tags of the ${{ inputs.package_name }} image: ${{ steps.get-latest-tags.outputs.container-tags }}"
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"

  docker-installation-test:
    runs-on: ubuntu-latest
    needs: [fetch-container-tags, generate-artifact-name]

    strategy:
      fail-fast: false
      matrix:
        tag: ${{ fromJSON(needs.fetch-container-tags.outputs.latest-tags) }}

    steps:
      - name: "Resolve Image Ref"
        id: image-info
        run: |
          # Link example: ghcr.io/dbt-labs/dbt-bigquery:1.3.latest
          ref=${{ env.GITHUB_PACKAGES_LINK }}/dbt-labs/${{ inputs.package_name }}:${{ matrix.tag }}
          echo "ref=$ref" >> $GITHUB_OUTPUT

      - name: "[DEBUG] Show Docker Version"
        run: |
          docker version

      - name: "Pull Image - ${{ steps.image-info.outputs.ref }}"
        run: |
          docker pull ${{ steps.image-info.outputs.ref }}

      - name: "[DEBUG] Show Available Images"
        run: |
          docker image ls --all

      - name: "Verify dbt-core Version"
        if: ${{ inputs.package_name }} == "dbt-core"
        uses: addnab/docker-run-action@v3
        with:
          registry: ${{ env.GITHUB_PACKAGES_LINK }}
          image: ${{ steps.image-info.outputs.ref }}
          run: dbt --version

      - name: "Verify ${{ inputs.package_name }} Version"
        if: ${{ inputs.package_name }} != "dbt-core"
        uses: addnab/docker-run-action@v3
        with:
          registry: ${{ env.GITHUB_PACKAGES_LINK }}
          image: ${{ steps.image-info.outputs.ref }}
          run: |
            PACKAGE=$(echo ${{ inputs.package_name }} | cut -c 5-)
            python -c "import dbt.adapters.$PACKAGE"

      - name: "Dump Job Status"
        if: ${{ always() }}
        id: job-status
        run: |
          file="test-${{ inputs.package_name }}-${{ strategy.job-index }}-${{ matrix.tag }}.json"
          # Create file
          touch $file 
          # Write job status to file
          echo $JOB_STATUS >> $file
          # Set path to file for subsequent steps          
          echo "path=$file" >> $GITHUB_OUTPUT
        env:
          JOB_STATUS: ${{ toJson(job.status) }}

      - name: "Upload Job Status For Slack Notification"
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.generate-artifact-name.outputs.artifact-name }}-${{ matrix.tag }}
          path: ${{ steps.job-status.outputs.path }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  send-slack-notification:
    needs: [generate-artifact-name, docker-installation-test]
    if: ${{ failure() && github.event_name == 'schedule' }}

    uses: ./.github/workflows/test-dbt-installation-notify-job-statuses.yml
    with:
      artifact_name: ${{ needs.generate-artifact-name.outputs.artifact-name }}
      installation_method: "Docker"
      package_name: ${{ inputs.package_name }}

    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
